<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Cezar Mathe</title><link>https://cezarmathe.com/posts/</link><description>Recent content in Posts on Cezar Mathe</description><generator>Hugo -- gohugo.io</generator><copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34; target=&#34;blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC-SA 4.0&lt;a&gt;</copyright><lastBuildDate>Sun, 07 Apr 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://cezarmathe.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating an utility to help me maintain my online presence: part 1</title><link>https://cezarmathe.com/posts/2019-04-07-creating-an-utility-to-help-me-maintain-my-online-presence-part-1/</link><pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate><guid>https://cezarmathe.com/posts/2019-04-07-creating-an-utility-to-help-me-maintain-my-online-presence-part-1/</guid><description>I really enjoy programming, so I write code quite often. Which means that my Portfolio section gets outdated quite quick.
That&amp;rsquo;s why I thought about creating a utility that automates the process of recording and processing my work, hence I came up with the name PWRP, which stands for Personal Work Recorder Processor. You can find this project here.
I decided to write this utility in Go because I love this programming language and it would be a very good opportunity for me to learn more about it.</description><content type="html"><![CDATA[

<p>I really enjoy programming, so I write code quite often. Which means that my <code>Portfolio</code> section gets outdated quite quick.</p>

<p>That&rsquo;s why I thought about creating a utility that automates the process of <strong>recording</strong> and <strong>processing</strong> my work, hence I came up with the name <strong>PWRP</strong>, which stands for <strong>Personal Work Recorder Processor</strong>. You can find this project <a href="https://github.com/cezarmathe/pwrp" target="_blank">here</a>.</p>

<p>I decided to write this utility in <strong>Go</strong> because I love this programming language and it would be a very good opportunity for me to learn more about it.</p>

<h1 id="my-plan-for-this-utility">My plan for this utility</h1>

<p>The utility should:</p>

<ol>
<li>Download(<em>git clone</em>) my projects locally in a specific workspace</li>
<li>Extract some metadata from a special branch in that git repository</li>
<li>Export the combine metadata from multiple projects(repositories) and a couple more data related to the time of recording in a special <strong>JSON</strong> recording report file that is database-ready(this is useful if you have a dynamic website that loads information regarding your work from a database) and can be further processed, if needed</li>
<li>Process the report file into a certain container format: <em>markdown</em>, <em>CSV</em>, <em>HTML</em>(with Liquid)</li>
</ol>

<p>I&rsquo;ve been working on the project for almost a month now, but I didn&rsquo;t rush into the features until I had a solid code structure that I can then easily use to expand the project. This includes working with configuration easily, easy logging management between different packages and a proper CLI structure.</p>

<h1 id="the-configuration">The configuration</h1>

<p>I chose the <a href="https://github.com/toml-lang/toml" target="_blank">toml</a> as I find it really straightforward to use from a user&rsquo;s perspective(and I also like it more than other data file formats)</p>

<h1 id="what-i-have-acomplished-so-far">What I have acomplished so far</h1>

<h2 id="configuration">Configuration</h2>

<p>I use <a href="https://github.com/spf13/viper" target="_blank">Viper</a> for handling the configuration file finding, opening and reading process; it also provides useful features like binding command line flags and environment variables to certain keys. If you&rsquo;d like to see an example configuration file, you can find one <a href="https://github.com/cezarmathe/pwrp/blob/master/pwrp.toml" target="_blank">here</a>.</p>

<h2 id="logging">Logging</h2>

<p>I wanted to have a separate way of logging debug messages(with full caller name, more details etc.) from other logging messages(verbose, info, warn etc.) that does not force you to possess two logger(<a href="https://github.com/sirupsen/logrus" target="_blank">logrus</a>) objects and that can easily transfer logging details(like level and enabling debug messages) to other packages.
Because of this, I created a <em>smartlogger</em> package that does just that. It wraps around <strong>logrus</strong> logger struct methods and it provides a couple of other useful methods, like reporting that a method has been called or it has returned(using the <a href="https://godoc.org/runtime" target="_blank">runtime</a> package).</p>

<p><img src="https://cezarmathe.com/img/2019-04-07-image.png" alt="Logging in action" title="Logging in action" /></p>

<h2 id="cli">CLI</h2>

<p>For the Command Line interface, I used <a href="https://github.com/spf13/cobra" target="_blank">cobra</a> to simplify using subcommands and flags.</p>

<h2 id="configuration-validation">Configuration validation</h2>

<p>The utility has a built in configuration validation system that checks the configuration each time it runs. You can also export a configuration file and validate it separately, which overwrites the previous file with the new changes(like adding protocols to URL&rsquo;s).</p>

<h2 id="recording-process">Recording process</h2>

<p>At the moment, the recording process loads the repositories listed in the configuration. Loading means:</p>

<ul>
<li>checking if the repository exists</li>
<li>pulling remote changes if the already exists</li>
<li>clone the repository if is doesn&rsquo;t exist locally</li>
</ul>
]]></content></item><item><title>Using Arduino pins as a data bus for transfering bits</title><link>https://cezarmathe.com/posts/2019-02-03-using-arduino-pins-as-a-data-bus-for-transfering-bits/</link><pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate><guid>https://cezarmathe.com/posts/2019-02-03-using-arduino-pins-as-a-data-bus-for-transfering-bits/</guid><description>These days I came up with an idea for a really cool IoT project, but that requires using Arduino pins as a bus for writing bits, so I wrote a small library for doing exactly that.
There is a video which showcases an example usage:</description><content type="html"><![CDATA[<p>These days I came up with an idea for a really cool IoT project, but that requires using Arduino pins as a bus for writing bits, so I wrote a <strong>small</strong> <a href="https://github.com/cezarmathe/pinbitwriter" target="_blank">library</a> for doing exactly that.</p>

<p>There is a video which showcases an example usage:</p>

<p><a href="https://www.youtube.com/watch?v=VhT3Jq5AsiM" target="_blank"><img src="https://img.youtube.com/vi/VhT3Jq5AsiM/0.jpg" alt="Arduino binary counter example" /></a></p>
]]></content></item><item><title>How to manage your dotfiles like a boss</title><link>https://cezarmathe.com/posts/2019-01-09-how-to-manage-your-dotfiles-like-a-boss/</link><pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate><guid>https://cezarmathe.com/posts/2019-01-09-how-to-manage-your-dotfiles-like-a-boss/</guid><description>First, a little bit of background. You set up a new computer and chances are you haven&amp;rsquo;t backed up your dotfiles. What do you do now? You spend hours trying to replicate the workflow and configurations, because someone didn&amp;rsquo;t take the time to back up his dotfiles. But hey, at least you&amp;rsquo;re trying now.
Before we start Go through your home directory, ~/.config and other folders that might contain configurations.</description><content type="html"><![CDATA[

<p>First, a little bit of background. You set up a new computer and chances are you haven&rsquo;t backed up your dotfiles. What do you do now? You spend hours trying to replicate the workflow and configurations, because <em>someone</em> didn&rsquo;t take the time to back up his dotfiles. But hey, at least you&rsquo;re trying now.</p>

<h2 id="before-we-start">Before we start</h2>

<p>Go through your home directory, <code>~/.config</code> and other folders that might contain configurations. Also, make sure that you <strong>DO NOT</strong> include private information like ssh and gnupg keys!</p>

<p>Then, create a folder somewhere in your home directory, give it a proper name; this folder is going to be the git repository that keeps track of your dotfiles. Mine is <code>~/Maintenance/dotfiles</code>.</p>

<h2 id="get-stow">Get stow</h2>

<p><a href="https://www.gnu.org/software/stow/" target="_blank">Stow</a> is a tool for managing symbolic links and our second dotfile management tool, along git.</p>

<ul>
<li><p>Mac: <code>$ brew install stow</code></p></li>

<li><p>Ubuntu: <code># apt get stow</code></p></li>

<li><p>Arch Linux: <code># pacman -S stow</code></p></li>
</ul>

<h2 id="the-actual-management">The actual management</h2>

<p>Fire up your terminal of choice, <code>cd</code> to the folder that you just created and run <code>git init</code>, our dotfiles are going to be versioned with git.</p>

<p>Then, create a couple of folders for things that are related, for example, create a folder for bash-related dotfiles, one for vim-related dotfiles, one for zsh-related dotfiles etc. Then, move <strong>the actual dotfiles</strong> from their original location in your home directory into the dotfiles folder and into the correct category; for example, <code>~/.bashrc</code> would go for me to <code>~/Maintenance/dotfiles/.bashrc</code>. Also, make sure that files have their complete path relative to the home directory inside the dotfiles folder, for example <code>~/.config/a_config_file</code> will be moved to <code>~/Maintenance/dotfiles/a_category/a_config_file</code>.</p>

<p>Inside the dotfiles folder, run this command: <code>$ stow -t &quot;${HOME}&quot; bash</code> and look in your home directory. You will see a symlink for <code>.bashrc</code> and for any other file that you placed in the bash category folder.</p>

<p>Continue moving dotfiles and creating categories until you feel you&rsquo;re good to go, then run <code>$ git add -A</code>, <code>$ git commit -a -m &quot;$(date)</code> and <code>$ git push &lt;the_origin.git&gt; master</code> and you&rsquo;re done!</p>

<h2 id="for-your-convenience">For your convenience</h2>

<p>You might want to add these aliases in your <code>.bashrc</code>:</p>

<pre><code class="language-shell">alias dotfiles='git --work-tree=/home/&lt;your_user&gt;/Maintenance/dotfiles/ --git-dir=/home/&lt;your_user&gt;/Maintenance/dotfiles/.git'
alias stow='stow -t ${HOME}'
</code></pre>

<p>Replace <code>Maintenance/dotfiles</code> with the path that you chose for your setup, but keep the <code>\</code> at the end of the path for the work tree.</p>

<h2 id="my-dotfiles">My dotfiles</h2>

<p>If you&rsquo;d like to see how my dotfiles are looking, visit <a href="https://github.com/cezarmathe/dotfiles" target="_blank">this</a> repository.</p>
]]></content></item><item><title>Getting myself a website</title><link>https://cezarmathe.com/posts/2019-01-03-getting-myself-a-website/</link><pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate><guid>https://cezarmathe.com/posts/2019-01-03-getting-myself-a-website/</guid><description>It&amp;rsquo;s a brand new year and I have big plans so far. And one of them is getting an up-and-running website for myself. Here it is.</description><content type="html"><![CDATA[<p>It&rsquo;s a brand new year and I have big plans so far. And one of them is getting an up-and-running website for myself. <a href="https://cezarmathe.com" target="_blank">Here it is</a>.</p>
]]></content></item></channel></rss>